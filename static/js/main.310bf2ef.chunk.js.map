{"version":3,"sources":["components/GoogleFontLoader/GoogleFontLoader.utils.ts","components/GoogleFontLoader/GoogleFontLoader.tsx","theme.ts","components/Header/Header.tsx","components/Layout/Layout.styles.tsx","components/Layout/Layout.tsx","components/AnimatedList/AnimatedList.styles.tsx","components/AnimatedList/AnimatedList.tsx","components/LikeButton/LikeButton.styles.tsx","components/LikeButton/LikeButton.tsx","components/Card/Card.styles.tsx","components/Card/Card.tsx","components/Controls/ControlButton.styles.tsx","components/Controls/ControlButton.tsx","components/Controls/Controls.styles.tsx","components/Controls/Controls.tsx","components/Tweets/Tweets.types.ts","components/Tweets/Tweets.state.ts","components/Tweets/Tweets.tsx","wallpaper.jpg","index.tsx","App.tsx"],"names":["MEASURING_TEXT","createGoogleFontUrl","fontName","fontWeight","replace","createFontNameParameter","Array","isArray","join","createFontWeightParameter","GoogleFontLoader","useEffect","document","context","createElement","getContext","font","baselineSize","measureText","width","fontIsInstalled","linkElement","setAttribute","head","appendChild","removeChild","breakpoints","theme","space","small","medium","large","xlarge","colors","dark","darkAccent","light","lightAccent","success","info","warning","danger","heart","mediaQueries","fonts","body","monospace","fontWeights","boxShadow","default","radii","Header","css","globalStyles","wallpaper","undefined","Layout","children","styles","slideIn","keyframes","fadeIn","animatedListStyles","list","item","AnimatedList","maxWidth","Children","map","child","bounce","base","liked","LikeButton","isLiked","onLikeClick","type","onClick","cardStyles","article","header","Card","account","content","disabled","inactive","ControlButton","active","title","container","Controls","likedLength","likedOnly","toggleLikedOnly","sortDirection","toggleSort","maxAge","toggleMaxAge","listLength","clearList","Infinity","ActionType","initialState","tweets","reducer","state","action","TWEET_ADD_NEW","newTweet","payload","id","nanoid","TWEET_TOGGLE_LIKE","tweet","find","nextTweet","otherTweets","filter","TWEET_CLEAR_STORAGE","TOGGLE_LIKED_ONLY","TOGGLE_SORT_DIRECTION","TOGGLE_MAX_AGE","Error","Tweets","dispatch","useReducer","subscription","tweets$","subscribe","unsubscribe","timestamp","differenceInSeconds","Date","now","sort","a","b","compareAsc","compareDesc","length","key","toggleTweetLike","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.310bf2ef.chunk.js","sourcesContent":["import { FontName, FontWeight } from './GoogleFontLoader.types';\n\n/* text with most common glyphs for measurement */\nconst MEASURING_TEXT = 'abcdefghijklmnopqrstuvwxyz0123456789';\n/* base url for loadig google fonts */\nconst FONTS_BASE_URL = 'https://fonts.googleapis.com/css2';\n\n/**\n * check if a font family is missing by measuring canvas sizes\n * adapted from: https://gist.github.com/alloyking/4154494\n */\nexport const fontIsInstalled = (fontName: FontName): boolean => {\n  /* determine document availability */\n  if (!document) return false;\n\n  /* create a 2d canvas for measuring font sizes */\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext('2d');\n\n  /* determine canvas context availability */\n  if (!context) return false;\n\n  /* measure systems default monospace font size */\n  context.font = '72px monospace';\n  const baselineSize = context.measureText(MEASURING_TEXT).width;\n\n  /* measure requested font size with system fallback */\n  context.font = `72px \"${fontName}\", monospace`;\n  const requestedSize = context.measureText(MEASURING_TEXT).width;\n\n  /* font is already available if requested and baseline sizes differ */\n  return requestedSize !== baselineSize;\n};\n\n/**\n * create font name parameter from font name according to google fonts\n */\nconst createFontNameParameter = (fontName: FontName): string =>\n  fontName.replace(/\\s+/g, '+');\n\n/**\n * create font weight parameter from font weight(s) according to google fonts\n */\nconst createFontWeightParameter = (fontWeight: FontWeight): string =>\n  `wght@${Array.isArray(fontWeight) ? fontWeight.join(';') : fontWeight}`;\n\n/**\n * create the correct url to request font\n */\nexport const createGoogleFontUrl = (\n  fontName: FontName,\n  fontWeight: FontWeight\n): string => {\n  const fontNameParam = createFontNameParameter(fontName);\n  const fontWeightParam = createFontWeightParameter(fontWeight);\n\n  return `${FONTS_BASE_URL}?family=${fontNameParam}:${fontWeightParam}&display=swap`;\n};\n","import { useEffect } from 'react';\n\nimport { FontName, FontWeight } from './GoogleFontLoader.types';\nimport { createGoogleFontUrl, fontIsInstalled } from './GoogleFontLoader.utils';\n\ninterface GoogleFontLoaderProps {\n  fontName: FontName;\n  fontWeight?: FontWeight;\n}\n\n/**\n * Load fonts from google only if requested font will not be available\n * @param fontName - Name of a font family which should be loaded\n * @param fontWeights - Font weight(s) which should be loaded\n * @constructor\n */\nexport const GoogleFontLoader = ({\n  fontName,\n  fontWeight = [400, 700],\n}: GoogleFontLoaderProps): null => {\n  /* detect if font should get loaded or not and append its link tag to the head */\n  useEffect(() => {\n    /* exit if no document is available or font is already installed or loaded */\n    if (!document || fontIsInstalled(fontName)) return;\n\n    /* create a link element with its necessary attributes */\n    const linkElement = document.createElement('link');\n    linkElement.setAttribute('rel', 'stylesheet');\n    linkElement.setAttribute('type', 'text/css');\n    linkElement.setAttribute('href', createGoogleFontUrl(fontName, fontWeight));\n\n    /* add link tag element when component is mounted */\n    document.head.appendChild(linkElement);\n\n    return () => {\n      /* remove link tag element when component is unmounted */\n      document.head.removeChild(linkElement);\n    };\n  }, [fontName, fontWeight]);\n\n  return null;\n};\n","const colors = {\n  dark: '#343a40',\n  darkAccent: '#828b92',\n  light: '#f8f9fa',\n  lightAccent: '#e3e3e3',\n  success: '#28a745',\n  info: '#17a2b8',\n  warning: '#ffc107',\n  danger: '#dc3545',\n  heart: '#dc358b',\n};\n\nconst breakpoints = ['40em', '52em', '64em'];\n\nconst mediaQueries = {\n  small: `@media screen and (min-width: ${breakpoints[0]})`,\n  medium: `@media screen and (min-width: ${breakpoints[1]})`,\n  large: `@media screen and (min-width: ${breakpoints[2]})`,\n};\n\nconst fonts = {\n  body: `'Open Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'`,\n  monospace: `SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace;`,\n};\nconst fontWeights = [400, 700];\n\nconst space = {\n  small: '0.5rem',\n  medium: '1rem',\n  large: '1.5rem',\n  xlarge: '2rem',\n};\n\nconst boxShadow = {\n  default: '0 0 10px rgba(125, 125, 125, 0.7)',\n};\n\nconst radii = {\n  default: '0.3rem',\n};\n\nexport const theme = {\n  space,\n  colors,\n  breakpoints,\n  mediaQueries,\n  fonts,\n  fontWeights,\n  boxShadow,\n  radii,\n};\n\nexport type Theme = typeof theme;\n","import React, { ReactElement } from 'react';\nimport { css } from '@emotion/react';\n\nimport { FontWeight, GoogleFontLoader } from '@components/GoogleFontLoader';\nimport { theme } from '../../theme';\n\nexport const Header = (): ReactElement => (\n  <>\n    <GoogleFontLoader\n      fontName=\"Patrick Hand SC\"\n      fontWeight={theme.fontWeights as FontWeight}\n    />\n    <h1\n      css={css`\n        display: flex;\n        margin-bottom: 2.5rem;\n        font-size: 60px;\n        line-height: 1;\n        font-weight: bold;\n        font-family: 'Patrick Hand SC', serif;\n        justify-content: center;\n      `}\n    >\n      TWEETS\n    </h1>\n  </>\n);\n","import { css, SerializedStyles } from '@emotion/react';\n\nimport { Theme } from '../../theme';\n\nexport const globalStyles = (\n  theme: Theme,\n  wallpaper?: string\n): SerializedStyles => css`\n  * {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n    font-size: inherit;\n  }\n\n  html {\n    font-size: 62.5%;\n    font-family: ${theme.fonts.body};\n    height: 100%;\n    -webkit-text-size-adjust: 100%;\n    -webkit-font-smoothing: antialiased;\n    text-rendering: optimizeLegibility;\n    -moz-osx-font-smoothing: grayscale;\n    touch-action: manipulation;\n  }\n\n  body {\n    height: 100%;\n    min-height: 100%;\n    color: white;\n    background-color: black;\n    font-size: 1.6rem;\n    font-feature-settings: 'kern';\n    overflow: hidden;\n\n    ${wallpaper !== undefined &&\n    css`\n      background-image: url(${wallpaper});\n      background-position: center center;\n      background-repeat: no-repeat;\n      background-attachment: fixed;\n      background-size: cover;\n    `}\n  }\n\n  *,\n  *::before,\n  *::after {\n    border-width: 0;\n    border-style: solid;\n    box-sizing: border-box;\n  }\n\n  code,\n  pre {\n    font-family: ${theme.fonts.monospace};\n  }\n\n  #root {\n    padding-top: 4rem;\n    height: 100%;\n    overflow: scroll;\n  }\n`;\n","import React, { ReactElement, ReactNode } from 'react';\nimport { Global, ThemeProvider } from '@emotion/react';\n\nimport { Theme } from '../../theme';\nimport { globalStyles } from './Layout.styles';\n\ninterface LayoutProps {\n  children?: ReactNode | ReactNode[];\n  theme: Theme;\n  wallpaper: string;\n}\n\nexport const Layout = ({\n  children,\n  theme,\n  wallpaper,\n}: LayoutProps): ReactElement => (\n  <ThemeProvider theme={theme}>\n    <Global styles={globalStyles(theme, wallpaper)} />\n    {children}\n  </ThemeProvider>\n);\n","import { css, keyframes } from '@emotion/react';\n\nconst slideIn = keyframes`\n  from {\n    max-height: 0;\n    margin-bottom: 0;\n  }\n  to {\n    max-height: 20rem;\n    margin-bottom: 1rem;\n  }\n`;\n\nconst fadeIn = keyframes`\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n`;\n\nexport const animatedListStyles = {\n  list: css`\n    display: flex;\n    flex-direction: column;\n    padding: 2rem;\n    margin: 0 auto;\n  `,\n  item: css`\n    list-style-type: none;\n    opacity: 0;\n    max-height: 0;\n    animation: ${slideIn} 300ms ease-out forwards,\n      ${fadeIn} 300ms ease-in-out 300ms forwards;\n    box-sizing: border-box;\n    margin-bottom: 0;\n  `,\n};\n","import React, { Children, ReactElement, ReactNode } from 'react';\n\nimport { animatedListStyles } from './AnimatedList.styles';\n\ninterface TweetListProps {\n  children: ReactNode | ReactNode[];\n  width?: number;\n}\n\nexport const AnimatedList = ({\n  children,\n  width,\n}: TweetListProps): ReactElement => (\n  <ul css={[animatedListStyles.list, width && { maxWidth: width }]}>\n    {Children.map(children, (child) => (\n      <li css={animatedListStyles.item}>{child}</li>\n    ))}\n  </ul>\n);\n","import { css, keyframes, SerializedStyles } from '@emotion/react';\n\nimport { Theme } from '../../theme';\n\nconst bounce = keyframes`\n  0% {\n    transform: scale(1);\n  }\n  15% {\n    transform: scale(0.85);\n  }\n  70% {\n    transform: scale(1.2);\n  }\n  100% {\n    transform: scale(1);\n  }\n`;\n\nexport const styles = {\n  base: (theme: Theme): SerializedStyles => css`\n    color: ${theme.colors.heart};\n    font-size: 3rem;\n    width: 3rem;\n    height: 3rem;\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    background-color: transparent;\n  `,\n  liked: (theme: Theme): SerializedStyles => css`\n    color: ${theme.colors.heart};\n    animation: ${bounce} 200ms ease-in-out forwards;\n  `,\n};\n","import React, { ReactElement } from 'react';\nimport { RiHeartFill, RiHeartLine } from 'react-icons/ri';\n\nimport { styles } from '@components/LikeButton/LikeButton.styles';\n\ninterface LikeButtonProps {\n  isLiked: boolean;\n  onLikeClick: () => void;\n}\n\nexport const LikeButton = ({\n  isLiked,\n  onLikeClick,\n}: LikeButtonProps): ReactElement => (\n  <button\n    type=\"button\"\n    css={[styles.base, isLiked && styles.liked]}\n    onClick={onLikeClick}\n  >\n    {isLiked ? <RiHeartFill /> : <RiHeartLine />}\n  </button>\n);\n","import { css, SerializedStyles } from '@emotion/react';\n\nimport { Theme } from '../../theme';\n\nexport const cardStyles = {\n  article: (theme: Theme): SerializedStyles => css`\n    position: relative;\n    color: ${theme.colors.dark};\n    background-color: ${theme.colors.light};\n    border-radius: ${theme.radii.default};\n    box-shadow: ${theme.boxShadow.default};\n    padding: ${theme.space.large};\n  `,\n  header: (theme: Theme): SerializedStyles => css`\n    margin-bottom: ${theme.space.medium};\n    display: flex;\n    justify-content: space-between;\n  `,\n};\n","import React, { ReactElement } from 'react';\n\nimport { LikeButton } from '@components/LikeButton';\nimport { Tweet } from '@components/Tweets';\nimport { cardStyles } from './Card.styles';\n\ninterface CardProps {\n  account: Tweet['account'];\n  content: Tweet['content'];\n  isLiked: Tweet['isLiked'];\n  onLikeClick: () => void;\n}\n\n/**\n * renders a twitter-ish card\n * @constructor\n */\nexport const Card = ({\n  account,\n  content,\n  isLiked,\n  onLikeClick,\n}: CardProps): ReactElement => {\n  return (\n    <article css={cardStyles.article}>\n      <header css={cardStyles.header}>\n        <strong>{account}</strong>\n        <LikeButton isLiked={isLiked} onLikeClick={onLikeClick} />\n      </header>\n      <p>{content}</p>\n    </article>\n  );\n};\n","import { css, SerializedStyles } from '@emotion/react';\n\nimport { Theme } from '../../theme';\n\nexport const styles = {\n  base: (theme: Theme): SerializedStyles => css`\n    font-size: 2.5rem;\n    padding: ${theme.space.medium};\n    flex-grow: 1;\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    color: ${theme.colors.dark};\n    background-color: ${theme.colors.light};\n\n    &:hover {\n      background-color: ${theme.colors.lightAccent};\n    }\n\n    &:not(:first-of-type) {\n      margin-left: 1px;\n    }\n\n    &:not(:last-of-type) {\n      margin-right: 1px;\n    }\n  `,\n  disabled: css`\n    cursor: default;\n  `,\n  inactive: (theme: Theme): SerializedStyles => css`\n    color: ${theme.colors.darkAccent};\n  `,\n};\n","import React, { ReactElement, ReactNode } from 'react';\n\nimport { styles } from './ControlButton.styles';\n\ninterface ControlButtonProps {\n  children?: ReactNode | ReactNode[];\n  onClick?: () => void;\n  disabled?: boolean;\n  active?: boolean;\n  title?: string;\n}\n\nexport const ControlButton = ({\n  children,\n  onClick,\n  disabled,\n  active,\n  title,\n}: ControlButtonProps): ReactElement => (\n  <button\n    title={title}\n    css={[\n      styles.base,\n      active === false && styles.inactive,\n      disabled === true && styles.disabled,\n    ]}\n    onClick={onClick}\n    disabled={disabled}\n  >\n    {children}\n  </button>\n);\n","import { css, SerializedStyles } from '@emotion/react';\n\nimport { Theme } from '../../theme';\n\nexport const styles = {\n  container: (theme: Theme): SerializedStyles => css`\n    margin: 0 auto;\n    padding: 0 ${theme.space.xlarge};\n  `,\n  base: (theme: Theme): SerializedStyles => css`\n    display: flex;\n    background-color: ${theme.colors.dark};\n    color: ${theme.colors.light};\n    border-radius: ${theme.radii.default};\n    box-shadow: ${theme.boxShadow.default};\n    overflow: hidden;\n  `,\n};\n","import React, { ReactElement } from 'react';\nimport {\n  ImSortAmountAsc,\n  ImSortAmountDesc,\n  MdTimer,\n  MdTimerOff,\n  RiDeleteBinLine,\n} from 'react-icons/all';\nimport { RiDeleteBinFill, RiHeartFill, RiHeartLine } from 'react-icons/ri';\n\nimport { ControlButton } from './ControlButton';\nimport { styles } from './Controls.styles';\n\ninterface ControlsProps {\n  width?: number;\n  likedLength: number;\n  likedOnly: boolean;\n  toggleLikedOnly: () => void;\n  sortDirection: string;\n  toggleSort: () => void;\n  maxAge: number;\n  toggleMaxAge: () => void;\n  listLength: number;\n  clearList: () => void;\n}\n\nexport const Controls = ({\n  width,\n  likedLength,\n  likedOnly,\n  toggleLikedOnly,\n  sortDirection,\n  toggleSort,\n  maxAge,\n  toggleMaxAge,\n  listLength,\n  clearList,\n}: ControlsProps): ReactElement => (\n  <nav css={[styles.container, width && { maxWidth: width }]}>\n    <div css={styles.base}>\n      <ControlButton\n        onClick={toggleLikedOnly}\n        title=\"toggle only liked tweets visibility\"\n        active={likedOnly}\n      >\n        {likedOnly ? <RiHeartFill /> : <RiHeartLine />}\n        {likedLength}\n      </ControlButton>\n      <ControlButton onClick={toggleSort} title=\"sort tweets by date\">\n        {sortDirection === 'ASC' ? <ImSortAmountAsc /> : <ImSortAmountDesc />}\n      </ControlButton>\n      <ControlButton\n        onClick={toggleMaxAge}\n        title=\"set maximum age for tweets\"\n        active={maxAge !== Infinity}\n      >\n        {maxAge !== Infinity ? <MdTimer /> : <MdTimerOff />}\n      </ControlButton>\n      <ControlButton\n        onClick={clearList}\n        disabled={listLength === 0}\n        title=\"empty list and wait for new tweets\"\n      >\n        {listLength ? <RiDeleteBinFill /> : <RiDeleteBinLine />}\n      </ControlButton>\n    </div>\n  </nav>\n);\n","export interface Tweet extends ExternalTweet {\n  id: string;\n  isLiked: boolean;\n}\n\nexport interface State {\n  tweets: Tweet[];\n  likedOnly: boolean;\n  sortDirection: 'ASC' | 'DESC';\n  maxAge: number;\n}\n\nexport enum ActionType {\n  TWEET_ADD_NEW = 'TWEET_ADD_NEW',\n  TWEET_TOGGLE_LIKE = 'TWEET_TOGGLE_LIKE',\n  TWEET_CLEAR_STORAGE = 'TWEET_CLEAR_STORAGE',\n  TOGGLE_LIKED_ONLY = 'TOGGLE_LIKED_ONLY',\n  TOGGLE_SORT_DIRECTION = 'TOGGLE_SORT_DIRECTION',\n  TOGGLE_MAX_AGE = 'TOGGLE_MAX_AGE',\n}\n\nexport type Action =\n  | {\n      type: ActionType.TWEET_ADD_NEW;\n      payload: ExternalTweet;\n    }\n  | {\n      type: ActionType.TWEET_TOGGLE_LIKE;\n      payload: Tweet['id'];\n    }\n  | {\n      type: ActionType.TWEET_CLEAR_STORAGE;\n    }\n  | {\n      type: ActionType.TOGGLE_LIKED_ONLY;\n    }\n  | {\n      type: ActionType.TOGGLE_SORT_DIRECTION;\n    }\n  | {\n      type: ActionType.TOGGLE_MAX_AGE;\n    };\n","import { nanoid } from 'nanoid';\n\nimport { Action, ActionType, State } from './Tweets.types';\n\nexport const initialState: State = {\n  tweets: [],\n  likedOnly: false,\n  sortDirection: 'DESC',\n  maxAge: 30,\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case ActionType.TWEET_ADD_NEW: {\n      const newTweet = {\n        ...action.payload,\n        id: nanoid(10),\n        isLiked: false,\n      };\n\n      return {\n        ...state,\n        tweets: [...state.tweets, newTweet],\n      };\n    }\n    case ActionType.TWEET_TOGGLE_LIKE: {\n      const tweet = state.tweets.find(({ id }) => id === action.payload);\n      if (!tweet) return state;\n\n      const nextTweet = {\n        ...tweet,\n        isLiked: !tweet.isLiked,\n      };\n      const otherTweets = state.tweets.filter(\n        ({ id }) => id !== action.payload\n      );\n\n      return {\n        ...state,\n        tweets: [...otherTweets, nextTweet],\n      };\n    }\n    case ActionType.TWEET_CLEAR_STORAGE: {\n      return {\n        ...state,\n        tweets: initialState.tweets,\n      };\n    }\n    case ActionType.TOGGLE_LIKED_ONLY: {\n      return {\n        ...state,\n        likedOnly: !state.likedOnly,\n      };\n    }\n    case ActionType.TOGGLE_SORT_DIRECTION: {\n      return {\n        ...state,\n        sortDirection: state.sortDirection === 'ASC' ? 'DESC' : 'ASC',\n      };\n    }\n    case ActionType.TOGGLE_MAX_AGE: {\n      return {\n        ...state,\n        maxAge:\n          state.maxAge === initialState.maxAge ? Infinity : initialState.maxAge,\n      };\n    }\n    default:\n      throw new Error();\n  }\n};\n","import React, { ReactElement, useEffect, useReducer } from 'react';\nimport { compareAsc, compareDesc, differenceInSeconds } from 'date-fns';\nimport { Subscribable } from 'rxjs';\n\nimport { AnimatedList } from '@components/AnimatedList';\nimport { Card } from '@components/Card/Card';\nimport { Controls } from '@components/Controls';\nimport { initialState, reducer } from './Tweets.state';\nimport { ActionType, Tweet } from './Tweets.types';\n\ndeclare const tweets$: Subscribable<ExternalTweet>;\n\nexport const Tweets = (): ReactElement => {\n  const [{ tweets, likedOnly, sortDirection, maxAge }, dispatch] = useReducer(\n    reducer,\n    initialState\n  );\n\n  /**\n   * subscribes to rxjs store in global namespace and pushes new subscriptions to state\n   */\n  useEffect(() => {\n    const subscription = tweets$.subscribe((newTweet) => {\n      dispatch({\n        type: ActionType.TWEET_ADD_NEW,\n        payload: newTweet,\n      });\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  /* toggle like for given tweet id */\n  const toggleTweetLike = (id: Tweet['id']) =>\n    dispatch({\n      type: ActionType.TWEET_TOGGLE_LIKE,\n      payload: id,\n    });\n\n  /* delete all tweets from list in state */\n  const clearTweetsStorage = () =>\n    dispatch({ type: ActionType.TWEET_CLEAR_STORAGE });\n\n  /* display only tweets that are flagged as liked */\n  const toggleLikedOnly = () =>\n    dispatch({ type: ActionType.TOGGLE_LIKED_ONLY });\n\n  /* change sort direction of tweet list */\n  const toggleSortDirection = () =>\n    dispatch({ type: ActionType.TOGGLE_SORT_DIRECTION });\n\n  /* only show tweets that are younger than 30s */\n  const toggleMaxAge = () => dispatch({ type: ActionType.TOGGLE_MAX_AGE });\n\n  let list = tweets;\n  list = list.filter(\n    ({ timestamp }) => differenceInSeconds(Date.now(), timestamp) < maxAge + 1\n  );\n  list = list.sort((a, b) =>\n    sortDirection === 'ASC'\n      ? compareAsc(a.timestamp, b.timestamp)\n      : compareDesc(a.timestamp, b.timestamp)\n  );\n  list = list.filter(({ isLiked }) => (likedOnly ? isLiked : true));\n\n  return (\n    <>\n      <Controls\n        width={550}\n        likedLength={list.filter(({ isLiked }) => isLiked).length}\n        likedOnly={likedOnly}\n        toggleLikedOnly={toggleLikedOnly}\n        sortDirection={sortDirection}\n        toggleSort={toggleSortDirection}\n        maxAge={maxAge}\n        toggleMaxAge={toggleMaxAge}\n        listLength={tweets.length}\n        clearList={clearTweetsStorage}\n      />\n\n      <AnimatedList width={550}>\n        {list.map(({ id, account, content, isLiked }) => (\n          <Card\n            key={id}\n            account={account}\n            content={content}\n            isLiked={isLiked}\n            onLikeClick={() => toggleTweetLike(id)}\n          />\n        ))}\n      </AnimatedList>\n    </>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/wallpaper.5353e9c0.jpg\";","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import React, { ReactElement } from 'react';\n\nimport { FontWeight, GoogleFontLoader } from '@components/GoogleFontLoader';\nimport { Header } from '@components/Header';\nimport { Layout } from '@components/Layout';\nimport { Tweets } from '@components/Tweets';\nimport { theme } from './theme';\nimport wallpaper from './wallpaper.jpg';\n\nexport const App = (): ReactElement => (\n  <Layout theme={theme} wallpaper={wallpaper}>\n    <GoogleFontLoader\n      fontName=\"Open Sans\"\n      fontWeight={theme.fontWeights as FontWeight}\n    />\n    <Header />\n    <Tweets />\n  </Layout>\n);\n"],"sourceRoot":""}